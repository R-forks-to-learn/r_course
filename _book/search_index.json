[
["index.html", "Modern R for STATEC Chapter 1 What is R? 1.1 Prerequisites 1.2 What are packages?", " Modern R for STATEC Bruno Rodrigues 2017-10-11 Chapter 1 What is R? Read R’s official answer to this question here. To make it short: R is multi-paradigm (procedural, imperative, object-oriented and functional)1 programming language that focuses on applications in statistics. By statistics I mean any field that uses statistics such as official statistics, economics, finance, data science, etc. 1.1 Prerequisites R and Rstudio are the two main pieces of software that we are going to use. Both are already installed on your desktop computer. R is the programming language and Rstudio is a modern IDE for it. R and Rstudio are both open source: this means that the source code is freely available on the internet and contributions by anyone are welcome and integrated; provided they are meaningful and useful. If you wish to install R and Rstudio at home to follow the examples in this book you can do it as both pieces of software are available free of charge (for firms paid options for Rstudio exist). Installation is simple, but operating system dependent. To download and install R for Windows, follow this link. For macOS, follow this one. If you run a GNU+Linux distribution, you can install R using the system’s package manager. On Ubuntu, install r-base. For Rstudio, look for your operating system here. 1.2 What are packages? There is one more step; we are going to install some packages. Packages are additional pieces of code that can be installed from within R with the following function: install.packages(). These packages extend R’s capabilities significantly, and are probably one of the main reasons R is so popular. As of October 2017, R has over 11000 packages. To install the packages we need, first open Rstudio and then copy and paste this line in the console: install.packages(c(&quot;tidyverse&quot;, &quot;checkpoint&quot;, &quot;eurostat&quot;, &quot;ggthemes&quot;, &quot;janitor&quot;, &quot;openxlsx&quot;)) or go to the Packages pane and then click on Install: In this book we are going to focus on R’s functional programming capabilities↩ "],
["getting-to-know-rstudio.html", "Chapter 2 Getting to know Rstudio 2.1 Panes 2.2 Console 2.3 Scripts 2.4 Options 2.5 Keyboard shortcuts 2.6 Projects 2.7 History 2.8 Plots", " Chapter 2 Getting to know Rstudio Rstudio is a modern IDE that makes writing R code easier. In this chapter, we will learn about some of Rstudio’s most useful features. 2.1 Panes Rstudio is divided into different panes. Each pane has a specific function. The gif below shows some of these panes: Take some time to look around what each pane shows you. Some panes are empty; for example the Plots pane or the Viewer pane. Plots shows you the plots you make. You can browse the plots and save them. We will see this in more detail in a later chapter. Viewer shows you previews of documents that you generate with R. More on this later. 2.2 Console The Console pane is where you can execute R code. Write the following in the console: 2 + 3 and you’ll get the answer, 5. However, do not write a lot of lines in the console. It is better write your code inside a script. 2.3 Scripts Look at the gif below: In this gif, we see the user creating a new R script. R scripts are simple text files that hold R code. Think of .do files in STATA or .c files for C. R scripts have the extension .r or .R. It is possible to create a lot of other files. We’ll take a look at R Markdown files later. 2.3.1 The help pane The Help pane allows you to consult documentation for functions or packages. The gif below shows how it works: you can also access help using the following syntax: ?lm. This will bring up the documentation for the function lm(). You can also type ??lm which will look for the string lm in every package. 2.3.2 The Environment pane The Environment pane shows every object created in the current section. It is especially useful if you have defined lists or have loaded data into R as it makes it easy to explore these more complex objects. 2.4 Options It is also possible to customize Rstudio’s look and feel: Take some time to go through the options. 2.5 Keyboard shortcuts It is a good idea to familiarize yourself with at least some keyboard shortcuts. This is more convenient than having to move the mouse around: If there is only one keyboard shortcut you need to know, it’s Ctrl-Enter that executes a line of code from your script. However, these other shortcuts are also worth knowing: CTRL-ALT-R: run entire script CTRL-ALT-UP or DOWN: make cursor taller or shorter, allowing you to edit multiple lines at the same time CTRL-F: Search and replace ALT-UP or DOWN: Move line up or down CTRL-SHIFT-C: Comment/uncomment line ALT-SHIFT-K: Bring up the list of keyboard shortcuts CTRL-SHIFT-M: Insert the pipe operator (%&gt;%, more on this later) CTRL-S: Save script This is just a few keyboard shortcuts that I personally find useful. However, I strongly advise you to learn and use whatever shortcuts are useful to you! 2.6 Projects One of the best features of Rstudio are projects. Creating a project is simple; the gif below shows how you can create a project and how you can switch between projects. Projects make a lot of things easier, such as managing paths. More on this in the chapter about reading data. Another useful feature of projects is that the scripts you open in project A will stay open even if you switch to another project B, and then switch back to the project A again. You can also use version control (with git) inside a project. Version control is very useful, but I won’t discuss it here. You can find a lot of resources online to get you started with git. 2.7 History The history pane saves all the previous lines you executed. You can then select these lines and send them back to the console or the script. 2.8 Plots All the plots you make during a session are visible in the Plots pane. From there, you can export them in different formats. The plots shown in the gif are made using basic R functions. Later, we will learn how to make nicer looking plots using the package ggplot2. "],
["packages.html", "Chapter 3 Packages", " Chapter 3 Packages You can think of packages as addons that extend R’s core functionality. You can browse all available package on CRAN. To make it easier to find what you might be interested in, you can also browes the CRAN Task Views. Each package has a landing page that summarises its dependencies, version number etc. For example, for the dplyr package: https://cran.r-project.org/web/packages/dplyr/index.html. Take a look at the Downloads section, and especially at the Reference Manual and Vignettes: Vignettes are valuable documents; inside vignettes, the purpose of the package is explained in plain English, usually with accompanying examples. The reference manuals list the available functions inside the packages. You can also find vignettes from within Rstudio: Go to the Packages pane and click on the package you’re interested in. Then you can consult the help for the functions that come with the package as well as the package’s vignettes. It is possible and easy to create your own packages. This is useful if you have to write a lot of functions that you use daily. This is outside the scope of this book, but if you’re interested you can read this other one I wrote. "],
["reading-and-writing-data.html", "Chapter 4 Reading and writing data", " Chapter 4 Reading and writing data Here is a review of existing methods. "],
["descriptive-statistics.html", "Chapter 5 Descriptive statistics", " Chapter 5 Descriptive statistics We describe our methods in this chapter. "],
["graphs.html", "Chapter 6 Graphs 6.1 ggplot2", " Chapter 6 Graphs Some significant applications are demonstrated in this chapter. 6.1 ggplot2 "],
["statistical-models.html", "Chapter 7 Statistical models", " Chapter 7 Statistical models We have finished a nice book. "],
["programming-with-r.html", "Chapter 8 Programming with R 8.1 Writing your own functions", " Chapter 8 Programming with R 8.1 Writing your own functions "],
["references.html", "References", " References "]
]
