[
["reading-and-writing-data.html", "Chapter 4 Reading and writing data", " Chapter 4 Reading and writing data R can import some formats without the need of external packages, such as the .csv format. However, for other formats, you will need to use different packages. Because there are a lot of different formats available I suggest you use rio. rio is basically a wrapper around every package that exists to import/export data. This package is nice because you don’t need to remember which package to use to import, say, STATA datasets. Read rio’s vignette for more details. Below I show some of rio’s functions presented in the vignette. To import data with rio, import() is all you need: mtcars = import(&quot;datasets/mtcars.csv&quot;) head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 import() needs the path to the data, and you can specify additional options if needed. Importing a STATA or a SAS file is done just the same: mtcars_stata = import(&quot;datasets/mtcars.dta&quot;) head(mtcars_stata) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 mtcars_sas = import(&quot;datasets/mtcars.sas7bdat&quot;) head(mtcars_sas) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 It is also possible to import Excel files where each sheet is a single table, but you will need import_list() for that. The file multi.xlsx has two sheets, each with a table in it: multi = import_list(&quot;datasets/multi.xlsx&quot;) str(multi) ## List of 2 ## $ :&#39;data.frame&#39;: 32 obs. of 11 variables: ## ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... ## ..$ disp: num [1:32] 160 160 108 258 360 ... ## ..$ hp : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... ## ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## ..$ wt : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... ## ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... ## ..$ vs : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... ## ..$ am : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... ## ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... ## ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... ## $ :&#39;data.frame&#39;: 150 obs. of 5 variables: ## ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## ..$ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... As you can see multi is a list of datasets. Told you lists were very flexible! It is also possible to import all the datasets in a single directory at once. For this, you first need a vector of paths: paths = Sys.glob(&quot;datasets/unemployment/*.csv&quot;) Sys.glob() allows you to find files using a regular expression. “datasets/unemployment/*.csv&quot; matches all the .csv files inside “datasets/unemployment”. all_data = import_list(paths) str(all_data) ## List of 4 ## $ :&#39;data.frame&#39;: 118 obs. of 7 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duch? de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Population ayant un emploi au total: int [1:118] 223407 17802 1703 844 1431 4094 2146 971 1218 3002 ... ## ..$ dont: Salari?s : int [1:118] 203535 15993 1535 750 1315 3800 1874 858 1029 2664 ... ## ..$ dont: Non-Salari?s : int [1:118] 19872 1809 168 94 116 294 272 113 189 338 ... ## ..$ Ch?meurs : int [1:118] 19287 1071 114 25 74 261 98 45 66 207 ... ## ..$ Population active : int [1:118] 242694 18873 1817 869 1505 4355 2244 1016 1284 3209 ... ## ..$ Taux de ch?mage (en %) : num [1:118] 7.95 5.67 6.27 2.88 4.92 ... ## $ :&#39;data.frame&#39;: 118 obs. of 7 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duch? de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Population ayant un emploi au total: int [1:118] 228423 18166 1767 845 1505 4129 2172 1007 1268 3124 ... ## ..$ dont: Salari?s : int [1:118] 208238 16366 1606 757 1390 3840 1897 887 1082 2782 ... ## ..$ dont: Non-Salari?s : int [1:118] 20185 1800 161 88 115 289 275 120 186 342 ... ## ..$ Ch?meurs : int [1:118] 19362 1066 122 19 66 287 91 38 61 202 ... ## ..$ Population active : int [1:118] 247785 19232 1889 864 1571 4416 2263 1045 1329 3326 ... ## ..$ Taux de ch?mage (en %) : num [1:118] 7.81 5.54 6.46 2.2 4.2 ... ## $ :&#39;data.frame&#39;: 118 obs. of 7 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duch? de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Population ayant un emploi au total: int [1:118] 233130 18310 1780 870 1470 4130 2170 1050 1300 3140 ... ## ..$ dont: Salari?s : int [1:118] 212530 16430 1620 780 1350 3820 1910 920 1100 2770 ... ## ..$ dont: Non-Salari?s : int [1:118] 20600 1880 160 90 120 310 260 130 200 370 ... ## ..$ Ch?meurs : int [1:118] 18806 988 106 29 73 260 80 41 72 169 ... ## ..$ Population active : int [1:118] 251936 19298 1886 899 1543 4390 2250 1091 1372 3309 ... ## ..$ Taux de ch?mage (en %) : num [1:118] 7.46 5.12 5.62 3.23 4.73 ... ## $ :&#39;data.frame&#39;: 118 obs. of 7 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duch? de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Population ayant un emploi au total: int [1:118] 236100 18380 1790 870 1470 4160 2160 1030 1330 3150 ... ## ..$ dont: Salari?s : int [1:118] 215430 16500 1640 780 1350 3840 1900 900 1130 2780 ... ## ..$ dont: Non-Salari?s : int [1:118] 20670 1880 150 90 120 320 260 130 200 370 ... ## ..$ Ch?meurs : int [1:118] 18185 975 91 27 66 246 76 35 70 206 ... ## ..$ Population active : int [1:118] 254285 19355 1881 897 1536 4406 2236 1065 1400 3356 ... ## ..$ Taux de ch?mage (en %) : num [1:118] 7.15 5.04 4.84 3.01 4.3 ... in a subsequent chapter we will learn how to actually use these lists of datasets. If something goes wrong, you might need to take a look at the underlying function rio is actually using to import the file. Let’s look at the following example: testdata = import(&quot;datasets/problems/mtcars.csv&quot;) head(testdata) ## mpg&amp;cyl&amp;disp&amp;hp&amp;drat&amp;wt&amp;qsec&amp;vs&amp;am&amp;gear&amp;carb ## 1 21&amp;6&amp;160&amp;110&amp;3.9&amp;2.62&amp;16.46&amp;0&amp;1&amp;4&amp;4 ## 2 21&amp;6&amp;160&amp;110&amp;3.9&amp;2.875&amp;17.02&amp;0&amp;1&amp;4&amp;4 ## 3 22.8&amp;4&amp;108&amp;93&amp;3.85&amp;2.32&amp;18.61&amp;1&amp;1&amp;4&amp;1 ## 4 21.4&amp;6&amp;258&amp;110&amp;3.08&amp;3.215&amp;19.44&amp;1&amp;0&amp;3&amp;1 ## 5 18.7&amp;8&amp;360&amp;175&amp;3.15&amp;3.44&amp;17.02&amp;0&amp;0&amp;3&amp;2 ## 6 18.1&amp;6&amp;225&amp;105&amp;2.76&amp;3.46&amp;20.22&amp;1&amp;0&amp;3&amp;1 as you can see, the import didn’t work quite well! This is because the separator is the &amp; for some reason. Because we are trying to read a .csv file, rio::import() is trying to use data.table::fread() under the hood (you can read this in imports()’s help). If you go and read data.table::fread()’s help, you see that the fread() has an optional sep = argument that you can use to specify the separator. You can use this argument in import() too, and it will be passed down to fread(): testdata = import(&quot;datasets/problems/mtcars.csv&quot;, sep = &quot;&amp;&quot;) head(testdata) ## mpg cyl disp hp drat wt qsec vs am gear carb ## 1 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 "]
]
